{
  "version": 3,
  "sources": ["../../src/bot.ts"],
  "sourcesContent": ["import type { StartBotParams } from \"zilch-game-engine\";\nimport { Move } from \"./play\";\n\nZilch.Bot = class Bot {\n  params: StartBotParams;\n\n  lastPaddleY: number = 0;\n  lastBallX: number = 0;\n  lastBallY: number = 0;\n  ballHitCount: number = 0;\n  lastBallComingTowardPaddle = false;\n  moveTowardNet = false;\n\n  constructor(params: StartBotParams) {\n    this.params = params;\n  }\n\n  static start(params: StartBotParams) {\n    return new Bot(params);\n  }\n\n  move(payload: string) {\n    const state = parsePayload(payload);\n    const isP1 = this.params.botIndex === 0;\n\n    const ballVelocity = {\n      x: state.ball.x - this.lastBallX,\n      y: state.ball.y - this.lastBallY,\n    };\n\n    const ballComingTowardsPaddle = isP1\n      ? ballVelocity.x < 0\n      : ballVelocity.x > 0;\n\n    if (!ballComingTowardsPaddle && this.lastBallComingTowardPaddle) {\n      this.ballHitCount++;\n    }\n\n    let move = \"none\";\n\n    if (\n      (this.params.type === \"practice\" && this.ballHitCount > 0) ||\n      (this.params.type === \"boss-easy\" && this.ballHitCount > 2) ||\n      (this.params.type === \"boss-medium\" && this.ballHitCount > 14)\n    ) {\n      if (this.params.type === \"practice\" && Math.random() < 0.5) {\n        const moves = [\"north\", \"south\", \"east\", \"west\", \"none\"];\n        move = moves[Math.floor(Math.random() * moves.length)];\n      } else if (ballComingTowardsPaddle) {\n        if (Math.abs(state.ball.y - state.paddle.y) < 1) {\n          move = \"none\";\n        } else if (state.ball.y < state.paddle.y) {\n          move = \"south\";\n        } else if (state.ball.y > state.paddle.y) {\n          move = \"north\";\n        } else {\n          move = \"none\";\n        }\n      } else {\n        move = \"none\";\n      }\n    } else if (ballComingTowardsPaddle) {\n      const m = ballVelocity.x === 0 ? 0 : -ballVelocity.y / ballVelocity.x;\n      const b = state.ball.x * m + state.ball.y;\n      const yIntercept = -m * state.paddle.x + b;\n\n      this.moveTowardNet = Math.random() > 0.5;\n\n      if (Math.abs(yIntercept - state.paddle.y) < 1.5) {\n        move = \"none\";\n      } else if (yIntercept < state.paddle.y) {\n        move = \"south\";\n      } else if (yIntercept > state.paddle.y) {\n        move = \"north\";\n      } else {\n        move = \"none\";\n      }\n    } else {\n      if (state.paddle.y > 1) {\n        move = \"south\";\n      } else if (state.paddle.y < -1) {\n        move = \"north\";\n      } else if (\n        this.params.type !== \"boss-easy\" &&\n        !this.moveTowardNet &&\n        Math.abs(state.paddle.x) < 38\n      ) {\n        move = isP1 ? \"west\" : \"east\";\n      } else if (\n        this.params.type !== \"boss-easy\" &&\n        this.moveTowardNet &&\n        Math.abs(state.paddle.x) > 20\n      ) {\n        move = isP1 ? \"east\" : \"west\";\n      } else {\n        move = \"none\";\n      }\n    }\n\n    this.lastBallComingTowardPaddle = ballComingTowardsPaddle;\n    this.lastBallX = state.ball.x;\n    this.lastBallY = state.ball.y;\n    this.lastPaddleY = state.paddle.y;\n\n    return move;\n  }\n\n  end(payload: string) {}\n};\n\nfunction parsePayload(payload: string) {\n  const parts = payload.split(\",\");\n\n  if (parts.length !== 4) {\n    throw new Error(\"Unexpected payload\");\n  }\n\n  const [paddleX, paddleY, ballX, ballY] = parts.map((value) => {\n    const num = parseFloat(value);\n\n    if (isNaN(num)) {\n      throw new Error(\"Unexpected payload\");\n    }\n\n    return num;\n  });\n\n  return {\n    paddle: {\n      x: paddleX,\n      y: paddleY,\n    },\n    ball: {\n      x: ballX,\n      y: ballY,\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": ["Bot", "params", "payload", "state", "parsePayload", "isP1", "ballVelocity", "ballComingTowardsPaddle", "move", "moves", "m", "b", "yIntercept", "parts", "paddleX", "paddleY", "ballX", "ballY", "value", "num"]
}

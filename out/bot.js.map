{
  "version": 3,
  "sources": ["../../src/bot.ts"],
  "sourcesContent": ["import type { StartBotParams } from \"zilch-game-engine\";\nimport { Move } from \"./play\";\n\nZilch.Bot = class Bot {\n  params: StartBotParams;\n\n  lastBallX: number = 0;\n  lastBallY: number = 0;\n  lastBallComingTowardPaddle = false;\n  hasHitBall = false;\n\n  constructor(params: StartBotParams) {\n    this.params = params;\n  }\n\n  static start(params: StartBotParams) {\n    return new Bot(params);\n  }\n\n  move(payload: string) {\n    const state = parsePayload(payload);\n    const isP1 = this.params.botIndex === 0;\n    const player = isP1 ? state.p1 : state.p2;\n    const otherPlayer = isP1 ? state.p2 : state.p1;\n\n    const ballComingTowardsPaddle = isP1\n      ? state.ball.x < this.lastBallX\n      : state.ball.x > this.lastBallX;\n\n    if (!ballComingTowardsPaddle && this.lastBallComingTowardPaddle) {\n      this.hasHitBall = true;\n    }\n\n    let move = \"none\";\n\n    if (this.params.type === \"practice\") {\n      if (Math.random() < 0.5 && this.hasHitBall) {\n        const moves = [\"south\", \"north\", \"east\", \"west\"];\n        move = moves[Math.floor(Math.random() * moves.length)];\n      } else if (Math.abs(state.ball.y - player.y) < 2) {\n        move = \"none\";\n      } else if (state.ball.y < player.y) {\n        move = \"south\";\n      } else {\n        move = \"north\";\n      }\n    } else if (this.params.type === \"boss-easy\") {\n      if (Math.abs(state.ball.y - player.y) < 2) {\n        move = \"none\";\n      } else if (state.ball.y < player.y) {\n        move = \"south\";\n      } else {\n        move = \"north\";\n      }\n    } else if (this.params.type === \"boss-medium\") {\n      if (ballComingTowardsPaddle) {\n        if (Math.abs(player.y - state.ball.y) < 1) {\n          if (isP1 ? player.x < -5 : player.x > 5) {\n            move = isP1 ? \"west\" : \"east\";\n          } else {\n            move = \"none\";\n          }\n        } else if (player.y > state.ball.y) {\n          move = \"south\";\n        } else {\n          move = \"north\";\n        }\n      } else {\n        if (Math.abs(player.y) > 2) {\n          move = player.y > 0 ? \"south\" : \"north\";\n        } else if (Math.abs(player.x) < 40) {\n          move = isP1 ? \"east\" : \"west\";\n        } else {\n          move = \"none\";\n        }\n      }\n    } else if (this.params.type == \"boss-hard\") {\n      if (ballComingTowardsPaddle) {\n        if (Math.abs(state.ball.y - player.y) < 1) {\n          move = \"none\";\n        } else if (state.ball.y < player.y) {\n          move = \"south\";\n        } else {\n          move = \"north\";\n        }\n      } else {\n        if (\n          Math.abs(player.x) > 10 &&\n          Math.abs(player.x - otherPlayer.x) > 30\n        ) {\n          move = isP1 ? \"west\" : \"east\";\n        } else if (Math.abs(player.y) > 2) {\n          move = player.y > 0 ? \"south\" : \"north\";\n        } else {\n          move = \"none\";\n        }\n      }\n    }\n\n    this.lastBallComingTowardPaddle = ballComingTowardsPaddle;\n    this.lastBallX = state.ball.x;\n    this.lastBallY = state.ball.y;\n\n    return move;\n  }\n\n  end(payload: string) {}\n};\n\nfunction parsePayload(payload: string) {\n  const parts = payload.split(\",\");\n\n  if (parts.length !== 6) {\n    throw new Error(\"Unexpected payload\");\n  }\n\n  const [p1x, p1y, p2x, p2y, ballX, ballY] = parts.map((value) => {\n    const num = parseFloat(value);\n\n    if (isNaN(num)) {\n      throw new Error(\"Unexpected payload\");\n    }\n\n    return num;\n  });\n\n  return {\n    p1: {\n      x: p1x,\n      y: p1y,\n    },\n    p2: {\n      x: p2x,\n      y: p2y,\n    },\n    ball: {\n      x: ballX,\n      y: ballY,\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": ["Bot", "params", "payload", "state", "parsePayload", "isP1", "player", "otherPlayer", "ballComingTowardsPaddle", "move", "moves", "parts", "p1x", "p1y", "p2x", "p2y", "ballX", "ballY", "value", "num"]
}
